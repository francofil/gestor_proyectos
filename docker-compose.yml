services:
  api:
    build: .
    container_name: gestor_api
    ports:
      - "3000:3000"
    env_file:
      - .env
    depends_on:
      db-master:
        condition: service_healthy
      db-replica:
        condition: service_started
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 1024M
        reservations:
          cpus: "1.0"
          memory: 512M

  # Base de datos MASTER (escritura)
  db-master:
    image: postgres:14
    container_name: gestor_db_master
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pgdata-master:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./docker/setup-master.sh:/docker-entrypoint-initdb.d/02-setup-master.sh
    command: postgres -c wal_level=replica -c max_wal_senders=3 -c wal_keep_size=64
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 10
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M

  # Base de datos REPLICA (solo lectura)
  db-replica:
    image: postgres:14
    container_name: gestor_db_replica
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5433:5432"
    depends_on:
      db-master:
        condition: service_healthy
    volumes:
      - pgdata-replica:/var/lib/postgresql/data
      - ./docker/setup-replica.sh:/docker-entrypoint-initdb.d/setup-replica.sh
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M

volumes:
  pgdata-master:
  pgdata-replica: